<?php

use Drupal\site_audit_report_entity\Entity\SiteAuditReport;
use Drupal\site_audit_send\Form\ConfigForm;
use \Drupal\site_audit_send\Event\SiteAuditSentEvent;

/**
 * @file
 * Primary module hooks for Site Audit Remote Client module.
 */

/**
 * Implements hook_form_FORM_ID_alter()
 * for site_audit_config_form
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 *
 * @return void
 */
function site_audit_send_form_site_audit_config_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  ConfigForm::alterForm($form, $form_state);
}

function site_audit_send_form_site_audit_report_add_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name == 'site_audit_send.send_report') {

    $hook = 'site_audit_send_send_methods';
    $send_method_options = (array) \Drupal::moduleHandler()->invokeAll($hook, $args = array());
    $default_method = key($send_method_options);

    $form['send_method'] = [
      '#title' => t('Send Report'),
      '#type' => 'radios',
      '#options' => $send_method_options,
      '#default_value' => $default_method,
      '#description' => t('How do you want to send it?'),
      '#weight' => -10,
    ];

    // Change text of button.

    $form['actions']['send'] = $form['actions']['submit'];
    $form['actions']['send']['#value'] = t('Send Report');

    // Remove ::save() from submit.
    $form['actions']['send']['#submit'] = [
      "::submitForm",
      "::send"
    ];

    $form['actions']['submit']['#value'] = t('Send Report and Save Locally');
    $form['actions']['submit']['#weight'] = 10;
    $form['actions']['submit']['#button_type'] = 'button';
    $form['actions']['submit']['#submit'] = [
      "::submitForm",
      "::send",
      "::save",
    ];
  }
}

/**
 * @TODO: Remove this and the form element for submit_remote.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity object.
 *
 * @ingroup entity_crud
 * @see hook_ENTITY_TYPE_insert()
 */
function site_audit_send_entity_insert(\Drupal\Core\Entity\EntityInterface $entity) {

  if (isset($entity->submit_remote) && $entity->submit_remote) {
    /**
     * @var \Drupal\site_audit_send\RestClient $client
     */
    $client = \Drupal::service('site_audit_send.rest_client');
    $data = $client->postReport($entity);

    \Drupal::logger('site_audit_send')->info(t('Remote Submit requested. Data: :data', [
        ':message' => 'test',
      ]
    ));



    # @TODO: POST data to remote.
  }
}

/**
 * Implements HOOK_site_audit_send_send_methods()
 * @return array
 */
function site_audit_send_site_audit_send_send_methods() {
  return [
    'report_api' => t('Remote Server')->render(),
    'email' => t('Email (coming soon)')->render(),
  ];
}

/**
 * Implements HOOK_site_audit_send_send_METHOD()
 * for report_api
 *
 * @param \Drupal\site_audit_report_entity\Entity\SiteAuditReport $entity
 *
 * @return void
 */
function site_audit_send_site_audit_send_send_report_api(\Drupal\site_audit_report_entity\Entity\SiteAuditReport &$entity) {

  /**
   * @var \Drupal\site_audit_send\RestClient $client
   */
  $client = \Drupal::service('site_audit_send.rest_client');
  $response = $client->postReport($entity);

  // Dispatch event.
  $event = new SiteAuditSentEvent($entity, $response);
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch($event, SiteAuditSentEvent::EVENT_NAME);

  $entity->link = null;

  switch ($response->getStatusCode()) {
    case 200:
      $report_data = json_decode($response->getBody()->getContents());
      $link = \Drupal\Core\Link::fromTextAndUrl($response->getHeader('ReportUri')[0], \Drupal\Core\Url::fromUri($response->getHeader('ReportUri')[0]), ['absolute' => TRUE])->toString();
      $entity->link = $response->getHeader('ReportUri')[0];
      \Drupal::messenger()->addStatus(t('Server received the Site Audit Report: @link', [
        '@link' => $link,
      ]));
      break;
    default:
      \Drupal::messenger()->addError(t('Server returned an error: :error (:code) :message', [
        ':error' => $response->getReasonPhrase(),
        ':code' => $response->getStatusCode(),
        ':message' => is_array($response->getHeader('Message'))? implode($response->getHeader('Message')): $response->getHeader('Message'),
      ]));
  }
}

/**
 * @return void
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function site_audit_send_cron() {

  $now = \Drupal::time()->getRequestTime();
  $config = \Drupal::config('site_audit_send.settings');

  // If enabled, and its the first time OR due for an update...
  $last_cron = \Drupal::state()->get('site_audit.cron_save_last', 0);
  $first_time = $last_cron == 0;
  $time_since_last_cron = $first_time? 0: $now - $last_cron;
  if ($config->get('cron_save_interval') > 0 && ($first_time || $time_since_last_cron > $config->get('cron_save_interval'))) {
    $label = t('Cron Report');
    $report = SiteAuditReport::saveReport($label, t('Report saved on cron run.'));
    \Drupal::messenger()->addStatus(t('Site Audit Report saved on cron: :report', [':report' => $report->link]));
    \Drupal::state()->set('site_audit.cron_save_last', $now);
  }

  $last_cron = \Drupal::state()->get('site_audit.cron_send_last', 0);
  $first_time = $last_cron == 0;
  $time_since_last_cron = $first_time? 0: $now - $last_cron;
  if ($config->get('cron_send_interval') > 0 && ($first_time || $time_since_last_cron > $config->get('cron_send_interval'))) {
    $label = $config->get('remote_label');
    $report = SiteAuditReport::sendReport($label, t('Report sent on cron run.'));
    \Drupal::messenger()->addStatus(t('Site Audit Report sent on cron: :report', [':report' => $report->link]));
    \Drupal::state()->set('site_audit.cron_send_last', $now);
  }
  if ($config->get('cron_delete_interval') > 0 && ($first_time || $time_since_last_cron > $config->get('cron_delete_interval'))) {
    \Drupal::messenger()->addStatus(t('Site Audit Report deletion on cron: :report', [':report' => $report->link]));
    \Drupal::state()->set('site_audit.last_cron', $now);
  }
//  if ($config->get('cron_delete_interval') && $first_time || $time_since_last_cron > $config->get('cron_delete_interval')) {
//    \Drupal::messenger()->addStatus('Cron delete triggered');
//  }



}

